// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetInsurancePlatform.Insurance.Infrastructure.Data;

#nullable disable

namespace PetInsurancePlatform.Insurance.Infrastructure.Migrations
{
    [DbContext(typeof(InsuranceDbContext))]
    [Migration("20250223143259_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("insurance")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_cities_province_id");

                    b.ToTable("cities", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean")
                        .HasColumnName("accepted");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_diseases");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_diseases_pet_id");

                    b.ToTable("diseases", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.InsurancePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool>("VIP")
                        .HasColumnType("boolean")
                        .HasColumnName("vip");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "PetInsurancePlatform.Insurance.Domain.Models.InsurancePlan.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("price_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_insurance_plans");

                    b.ToTable("insurance_plans", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.InsurancePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<Guid?>("InsurancePlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("insurance_plan_id");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.ComplexProperty<Dictionary<string, object>>("Payment", "PetInsurancePlatform.Insurance.Domain.Models.InsurancePolicy.Payment#Payment", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<JsonDocument>("Details")
                                .HasColumnType("jsonb")
                                .HasColumnName("payment_details");

                            b1.Property<int>("Method")
                                .HasColumnType("integer")
                                .HasColumnName("payment_method");

                            b1.Property<Guid>("ReferenceNumber")
                                .HasColumnType("uuid")
                                .HasColumnName("payment_reference_number");

                            b1.Property<long>("ReservationNumber")
                                .HasColumnType("bigint")
                                .HasColumnName("payment_reservation_number");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("payment_status");

                            b1.ComplexProperty<Dictionary<string, object>>("Amount", "PetInsurancePlatform.Insurance.Domain.Models.InsurancePolicy.Payment#Payment.Amount#Money", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<long>("Value")
                                        .HasColumnType("bigint")
                                        .HasColumnName("payment_amount_value");
                                });
                        });

                    b.HasKey("Id")
                        .HasName("pk_insurance_policies");

                    b.HasIndex("InsurancePlanId")
                        .HasDatabaseName("ix_insurance_policies_insurance_plan_id");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_insurance_policies_pet_id");

                    b.ToTable("insurance_policies", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<long>("NationalID")
                        .HasColumnType("bigint")
                        .HasColumnName("national_id");

                    b.HasKey("Id")
                        .HasName("pk_owners");

                    b.ToTable("owners", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.OwnerTermsOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("TermsOfServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("terms_of_service_id");

                    b.HasKey("Id")
                        .HasName("pk_owner_terms_of_service");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_owner_terms_of_service_owner_id");

                    b.HasIndex("TermsOfServiceId")
                        .HasDatabaseName("ix_owner_terms_of_service_terms_of_service_id");

                    b.ToTable("owner_terms_of_service", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("breed");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("MicrochipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("microchip_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("PetTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "PetInsurancePlatform.Insurance.Domain.Models.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Alley")
                                .HasColumnType("text")
                                .HasColumnName("address_alley");

                            b1.Property<int>("District")
                                .HasColumnType("integer")
                                .HasColumnName("address_district");

                            b1.Property<int>("PlateNumber")
                                .HasColumnType("integer")
                                .HasColumnName("address_plate_number");

                            b1.Property<long>("PostalCode")
                                .HasColumnType("bigint")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Appearances", "PetInsurancePlatform.Insurance.Domain.Models.Pet.Appearances#List<Appearance>", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("integer")
                                .HasColumnName("appearances_capacity");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FrontView", "PetInsurancePlatform.Insurance.Domain.Models.Pet.FrontView#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("front_view_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("front_view_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("front_view_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("front_view_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("front_view_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("front_view_uploaded_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HealthCertificate", "PetInsurancePlatform.Insurance.Domain.Models.Pet.HealthCertificate#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("health_certificate_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("health_certificate_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("health_certificate_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("health_certificate_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("health_certificate_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("health_certificate_uploaded_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LeftSideView", "PetInsurancePlatform.Insurance.Domain.Models.Pet.LeftSideView#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("left_side_view_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("left_side_view_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("left_side_view_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("left_side_view_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("left_side_view_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("left_side_view_uploaded_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "PetInsurancePlatform.Insurance.Domain.Models.Pet.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("price_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RearView", "PetInsurancePlatform.Insurance.Domain.Models.Pet.RearView#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("rear_view_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("rear_view_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("rear_view_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("rear_view_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("rear_view_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("rear_view_uploaded_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RightSideView", "PetInsurancePlatform.Insurance.Domain.Models.Pet.RightSideView#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("right_side_view_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("right_side_view_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("right_side_view_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("right_side_view_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("right_side_view_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("right_side_view_uploaded_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("WalkingVideo", "PetInsurancePlatform.Insurance.Domain.Models.Pet.WalkingVideo#StoredFile", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("walking_video_bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("walking_video_content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("walking_video_key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("walking_video_name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("walking_video_size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("walking_video_uploaded_at");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_pets_city_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_pets_owner_id");

                    b.HasIndex("PetTypeId")
                        .HasDatabaseName("ix_pets_pet_type_id");

                    b.ToTable("pets", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.ComplexProperty<Dictionary<string, object>>("AgeRange", "PetInsurancePlatform.Insurance.Domain.Models.PetType.AgeRange#AgeRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("MaximumValue")
                                .HasColumnType("integer")
                                .HasColumnName("age_range_maximum_value");

                            b1.Property<int>("MinimumValue")
                                .HasColumnType("integer")
                                .HasColumnName("age_range_minimum_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pet_types");

                    b.ToTable("pet_types", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.PetTypeDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("disease_id");

                    b.Property<Guid>("PetTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_type_id");

                    b.HasKey("Id")
                        .HasName("pk_pet_type_diseases");

                    b.HasIndex("DiseaseId")
                        .HasDatabaseName("ix_pet_type_diseases_disease_id");

                    b.HasIndex("PetTypeId")
                        .HasDatabaseName("ix_pet_type_diseases_pet_type_id");

                    b.ToTable("pet_type_diseases", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_provinces");

                    b.ToTable("provinces", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.TermsOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_terms_of_services");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_terms_of_services_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_terms_of_services_owner_id");

                    b.ToTable("terms_of_services", "insurance");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.City", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cities_provinces_province_id");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Disease", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Pet", null)
                        .WithMany("Diseases")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_diseases_pets_pet_id");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.InsurancePlan", b =>
                {
                    b.OwnsMany("PetInsurancePlatform.Insurance.Domain.ValueObjects.InsuranceCoverage", "Coverages", b1 =>
                        {
                            b1.Property<Guid>("InsurancePlanId")
                                .HasColumnType("uuid")
                                .HasColumnName("insurance_plan_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("InsurancePlanId", "Id")
                                .HasName("pk_insurance_coverage");

                            b1.ToTable("insurance_coverage", "insurance");

                            b1.WithOwner()
                                .HasForeignKey("InsurancePlanId")
                                .HasConstraintName("fk_insurance_coverage_insurance_plans_insurance_plan_id");
                        });

                    b.Navigation("Coverages");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.InsurancePolicy", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.InsurancePlan", null)
                        .WithMany("Policies")
                        .HasForeignKey("InsurancePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_insurance_policies_insurance_plans_insurance_plan_id");

                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_insurance_policies_pets_pet_id");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.OwnerTermsOfService", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_owner_terms_of_service_owners_owner_id");

                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.TermsOfService", "TermsOfService")
                        .WithMany()
                        .HasForeignKey("TermsOfServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_owner_terms_of_service_terms_of_services_terms_of_service_id");

                    b.Navigation("Owner");

                    b.Navigation("TermsOfService");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Pet", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pets_cities_city_id");

                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Owner", null)
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pets_owners_owner_id");

                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pets_pet_types_pet_type_id");

                    b.OwnsMany("PetInsurancePlatform.Insurance.Domain.ValueObjects.StoredFile", "BirthCertificatesPages", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid")
                                .HasColumnName("pet_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("BucketName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("bucket_name");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("content_type");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("key");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<long>("SizeInBytes")
                                .HasColumnType("bigint")
                                .HasColumnName("size_in_bytes");

                            b1.Property<DateTime>("UploadedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("uploaded_at");

                            b1.HasKey("PetId", "Id")
                                .HasName("pk_stored_file");

                            b1.ToTable("stored_file", "insurance");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_stored_file_pets_pet_id");
                        });

                    b.Navigation("BirthCertificatesPages");

                    b.Navigation("City");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.PetTypeDisease", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pet_type_diseases_diseases_disease_id");

                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pet_type_diseases_pet_types_pet_type_id");

                    b.Navigation("Disease");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.TermsOfService", b =>
                {
                    b.HasOne("PetInsurancePlatform.Insurance.Domain.Models.Owner", null)
                        .WithMany("TermsOfServices")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_terms_of_services_owners_owner_id");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.InsurancePlan", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Owner", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("TermsOfServices");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Pet", b =>
                {
                    b.Navigation("Diseases");
                });

            modelBuilder.Entity("PetInsurancePlatform.Insurance.Domain.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
